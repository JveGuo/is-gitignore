{
  "version": 3,
  "sources": ["../../src/ignore/index.ts"],
  "sourcesContent": ["/**\n * @Author: jiawei.guo\n * @Date: 2022-11-26 16:45:12\n * @Description: is ignore\n */\nimport { readFileSync, pathExistsSync } from \"fs-extra\";\nimport { red } from \"chalk\";\nimport { IgnoreProps } from \"../types/index\";\nimport * as path from \"path\";\n\nconst ignore = ({ folderPath }: IgnoreProps) => {\n  const ignorePathList: string[] = [];\n\n  // \u5224\u65AD\u662F\u4E0D\u662F\u5FFD\u7565\u7684\u6587\u4EF6\n  const isIgnore: (filePath: string) => boolean = (filePath: string) => {\n    try {\n      if (!filePath || typeof filePath !== \"string\") {\n        throw new Error(\"function isIgnore parameter is invalid.\");\n      }\n\n      // \u8981\u5224\u65AD\u7684\u6587\u4EF6\u8DEF\u5F84\n      const findFilePath = path.resolve(folderPath, `./${filePath}`);\n\n      // \u5224\u65AD\u4F20\u5165\u6587\u4EF6\u5939\u662F\u5426\u5B58\u5728\n      const ignorePathExist = pathExistsSync(findFilePath);\n\n      if (!ignorePathExist) {\n        throw new Error(`${filePath} file does not exist.`);\n      }\n\n      return ignorePathList.some((item) => findFilePath.indexOf(item) > -1);\n    } catch (error) {\n      console.log(red(`\u2718 ${(error as Error).message}`));\n      return false;\n    }\n  };\n\n  try {\n    if (!folderPath || typeof folderPath !== \"string\") {\n      throw new Error(\"folderPath is invalid.\");\n    }\n\n    // \u5224\u65AD\u4F20\u5165\u6587\u4EF6\u5939\u662F\u5426\u5B58\u5728\n    const pathExist = pathExistsSync(folderPath);\n\n    if (!pathExist) {\n      throw new Error(\"The folder path does not exist.\");\n    }\n\n    // .gitignore \u6587\u4EF6\u8DEF\u5F84\n    const ignorePath = path.join(folderPath, \".gitignore\");\n\n    // \u5224\u65AD\u4F20\u5165\u6587\u4EF6\u5939\u662F\u5426\u5B58\u5728\n    const ignorePathExist = pathExistsSync(ignorePath);\n\n    if (!ignorePathExist) {\n      throw new Error(\"'.gitignore' file does not exist.\");\n    }\n\n    // \u8BFB\u53D6 .gitignore \u6587\u4EF6\u6570\u636E\n    const ignoreFile = readFileSync(ignorePath, \"utf-8\");\n\n    // .gitignore \u8981\u5FFD\u7565\u7684\u6570\u7EC4\n    const ignoreArr = ignoreFile?.split(/\\r?\\n|\\r/);\n\n    console.log(ignoreArr);\n\n    for (const item of ignoreArr) {\n      ignorePathList.push(path.resolve(folderPath, `./${item}`));\n    }\n\n    return {\n      ignorePathList,\n      isIgnore,\n    };\n  } catch (error) {\n    console.log(red(`\u2718 ${(error as Error).message}`));\n  }\n};\n\nexport default ignore;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,sBAA6C;AAC7C,mBAAoB;AAEpB,WAAsB;AAEtB,IAAM,SAAS,CAAC,EAAE,WAAW,MAAmB;AAC9C,QAAM,iBAA2B,CAAC;AAGlC,QAAM,WAA0C,CAAC,aAAqB;AACpE,QAAI;AACF,UAAI,CAAC,YAAY,OAAO,aAAa,UAAU;AAC7C,cAAM,IAAI,MAAM,yCAAyC;AAAA,MAC3D;AAGA,YAAM,eAAoB,aAAQ,YAAY,KAAK,UAAU;AAG7D,YAAM,sBAAkB,gCAAe,YAAY;AAEnD,UAAI,CAAC,iBAAiB;AACpB,cAAM,IAAI,MAAM,GAAG,+BAA+B;AAAA,MACpD;AAEA,aAAO,eAAe,KAAK,CAAC,SAAS,aAAa,QAAQ,IAAI,IAAI,EAAE;AAAA,IACtE,SAAS,OAAP;AACA,cAAQ,QAAI,kBAAI,UAAM,MAAgB,SAAS,CAAC;AAChD,aAAO;AAAA,IACT;AAAA,EACF;AAEA,MAAI;AACF,QAAI,CAAC,cAAc,OAAO,eAAe,UAAU;AACjD,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC1C;AAGA,UAAM,gBAAY,gCAAe,UAAU;AAE3C,QAAI,CAAC,WAAW;AACd,YAAM,IAAI,MAAM,iCAAiC;AAAA,IACnD;AAGA,UAAM,aAAkB,UAAK,YAAY,YAAY;AAGrD,UAAM,sBAAkB,gCAAe,UAAU;AAEjD,QAAI,CAAC,iBAAiB;AACpB,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACrD;AAGA,UAAM,iBAAa,8BAAa,YAAY,OAAO;AAGnD,UAAM,YAAY,yCAAY,MAAM;AAEpC,YAAQ,IAAI,SAAS;AAErB,eAAW,QAAQ,WAAW;AAC5B,qBAAe,KAAU,aAAQ,YAAY,KAAK,MAAM,CAAC;AAAA,IAC3D;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF,SAAS,OAAP;AACA,YAAQ,QAAI,kBAAI,UAAM,MAAgB,SAAS,CAAC;AAAA,EAClD;AACF;AAEA,IAAO,iBAAQ;",
  "names": []
}
